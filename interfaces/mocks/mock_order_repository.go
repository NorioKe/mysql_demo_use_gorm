// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repositories/order_repository.go

package mocks

import (
	models "github.com/NorioKe/mysql_demo_use_gorm/domain/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrderRepository is a mock of OrderRepository interface
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return _m.recorder
}

// FindByID mocks base method
func (_m *MockOrderRepository) FindByID(orderID uint64) (*models.Order, error) {
	ret := _m.ctrl.Call(_m, "FindByID", orderID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (_mr *MockOrderRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindByID", reflect.TypeOf((*MockOrderRepository)(nil).FindByID), arg0)
}

// Save mocks base method
func (_m *MockOrderRepository) Save(order *models.Order) (uint64, error) {
	ret := _m.ctrl.Call(_m, "Save", order)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (_mr *MockOrderRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Save", reflect.TypeOf((*MockOrderRepository)(nil).Save), arg0)
}

// UpdateValidity mocks base method
func (_m *MockOrderRepository) UpdateValidity(orderID uint64, isValid bool) (int8, error) {
	ret := _m.ctrl.Call(_m, "UpdateValidity", orderID, isValid)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateValidity indicates an expected call of UpdateValidity
func (_mr *MockOrderRepositoryMockRecorder) UpdateValidity(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateValidity", reflect.TypeOf((*MockOrderRepository)(nil).UpdateValidity), arg0, arg1)
}
