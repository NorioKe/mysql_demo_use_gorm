// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repositories/transaction_repository.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransactionManager is a mock of TransactionManager interface
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return _m.recorder
}

// Transaction mocks base method
func (_m *MockTransactionManager) Transaction(_param0 func() error) error {
	ret := _m.ctrl.Call(_m, "Transaction", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction
func (_mr *MockTransactionManagerMockRecorder) Transaction(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Transaction", reflect.TypeOf((*MockTransactionManager)(nil).Transaction), arg0)
}
