// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repositories/user_repository.go

package mocks

import (
	models "github.com/NorioKe/mysql_demo_use_gorm/domain/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return _m.recorder
}

// FindByID mocks base method
func (_m *MockUserRepository) FindByID(id uint64) (*models.User, error) {
	ret := _m.ctrl.Call(_m, "FindByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (_mr *MockUserRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindByID", reflect.TypeOf((*MockUserRepository)(nil).FindByID), arg0)
}

// FindByEmail mocks base method
func (_m *MockUserRepository) FindByEmail(email string) (*models.User, error) {
	ret := _m.ctrl.Call(_m, "FindByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail
func (_mr *MockUserRepositoryMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), arg0)
}

// Save mocks base method
func (_m *MockUserRepository) Save(user *models.User) (uint64, error) {
	ret := _m.ctrl.Call(_m, "Save", user)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (_mr *MockUserRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), arg0)
}

// UpdateTotalConsumption mocks base method
func (_m *MockUserRepository) UpdateTotalConsumption(user *models.User) (int8, error) {
	ret := _m.ctrl.Call(_m, "UpdateTotalConsumption", user)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTotalConsumption indicates an expected call of UpdateTotalConsumption
func (_mr *MockUserRepositoryMockRecorder) UpdateTotalConsumption(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateTotalConsumption", reflect.TypeOf((*MockUserRepository)(nil).UpdateTotalConsumption), arg0)
}
